package markmanager;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import brmHandlers.ItemTypeDeploy;
import brmHandlers.PinLoadGlid;
import brmHandlers.XmlUtils;
import brmHandlers.XmlUtilsByModality;
import config.Parameters;
import cust.DateFormater;
import cust.Modality;
import cust.Modality.ResultName;
import cust.PriceTier;
import cust.PriceTierRange;
import cust.ServiceType;
import cust.Utils;
import cust.Validations;
import log.Logger;


/**
 *
 * @author Adrian Rocha
 * @modifiedBy Roger Masis
 */
public class AddMark {
	//Analizar tema de alta cuando el item type ya existe
	//Una posibilidad es avanzar si es que las fechas no se superponen

    /**
     * @param args Requiere Campa\u00F1a, precio, nombre, marcaci\u00F3n y fechas, 
     */
    public static void main(String[] args) {
        Parameters.loadParameters();
        Logger.setName("AddMark");
        Logger.log(Logger.Debug, "*** Inicio Ejecuci\u00F3n - MODO NUEVA MARCACION ***");
        Logger.log(Logger.Debug, "Parametros: "+String.join(",", args));
        Utils.removeSpecialChar(args);
        Integer i = 0;
        Modality modality = Modality.getModality(args[i]);
        if (args.length >= 11 && modality == null) {
        	Logger.screen(Logger.Error, "Tipo de modalidad [" + args[i] + "] no ha sido implemantada");
            System.exit(Parameters.ERR_INVALID_VALUE);
        }
		if (modality != null)
			i++;
		else
			modality = Modality.POSPAID;
        String evtType = args[i++];//900-SMS
        String rateType = args[i++];//MO-MT-DUR-EVT
        String campaign = args[i++];//NUMERO 900
        String campaignName = args[i++].replace(' ', '_');
        String realNumber = args[i++];
        String validFrom = args[i++];
        String validTo = args[i++];
        String glid = args[i++];
        Double price = Double.parseDouble(args[i++]);
        String taxCode = args[i++];
        DateFormater.stringToDate(validFrom);
        DateFormater.stringToDate(validTo);
    	ItemTypeDeploy.validateCM();
    	if (validFrom.compareTo(validTo) > 0) {
            Logger.screen(Logger.Error, "Valor inv\u00E1lido en Fechas de campa\u00F1a, el inicio no puede ser posterior al final."+evtType);
            System.exit(Parameters.ERR_INVALID_VALUE);
    	}
    	if (validFrom.compareTo(Parameters.START_DATE_FROM) < 0) {
            Logger.screen(Logger.Error, "Valor inv\u00E1lido en Fechas de campa\u00F1a, el inicio no puede ser menor a "+Parameters.START_DATE_FROM);
            System.exit(Parameters.ERR_INVALID_VALUE);
    	}
    	Validations.validateCampaignID(campaign, evtType);
    	Validations.validateEvtAndRateType(evtType, rateType);
    	Validations.validateRealNumber(realNumber, evtType, campaign);
    	ServiceType serviceType = ServiceType.getServiceType(evtType);
        if (args.length >= 11 && modality.equals(Modality.HORARY) && !serviceType.equals(ServiceType.TEL)) {
        	Logger.screen(Logger.Error, "La campa\\u00F1a [" + evtType + "] no ha sido implemantada para esta modalidad [" + modality + "].");
            System.exit(Parameters.ERR_INVALID_VALUE);
        }
    	if (!PinLoadGlid.existsGlid(glid)) {
            Logger.screen(Logger.Error, "El GLID indicado no existe: "+glid);
            System.exit(Parameters.ERR_INVALID_VALUE);    		
    	}
        Logger.log(Logger.Debug, "******Price: "+args[8]);
        try {
        	if ((modality.equals(Modality.HYBRID) || modality.equals(Modality.PREPAID) || modality.equals(Modality.HORARY)) && serviceType.equals(ServiceType.TEL))
        		campaignTel(modality, rateType, campaign, campaignName, realNumber, validFrom, validTo, glid, price, taxCode);
        	else if ((modality.equals(Modality.HYBRID) || modality.equals(Modality.PREPAID)) && serviceType.equals(ServiceType.SMS)) 
        		campaignSms(modality, rateType, campaign, campaignName, realNumber, validFrom, validTo, glid, price, taxCode);
        	else if (evtType.equals("900")) {
  
        		String zoneDur = "ND"+campaign;
        		String zoneEvt = "NE"+campaign;
        		String zoneName;
            	if (rateType.equals("DUR")) {
            		zoneName = "E_"+zoneDur;
            	}
            	else {
            		zoneName = "E_"+zoneEvt;
            	}
            	if (XmlUtils.isZoneValidAtDate("E_"+zoneDur, validFrom) || XmlUtils.isZoneValidAtDate("E_"+zoneEvt, validFrom) || 
            			XmlUtils.isZoneValidAtDate("E_"+zoneDur, validTo) || XmlUtils.isZoneValidAtDate("E_"+zoneEvt, validTo)) {
            		dateNotValid();
            	}
            	if (XmlUtils.isZoneDestinValidAtDate("00999"+realNumber, validFrom) || XmlUtils.isZoneDestinValidAtDate("00999"+realNumber, validTo)) {
            		dateNotValidForRealNumber();
            	}
            	Logger.log(Logger.Debug, "Agregando Zone Item");
            	XmlUtils.addZoneItem("TelcoGsmTelephony", zoneName, validFrom, validTo, "00999" + realNumber, campaignName);
            	//Busco si es que ya existe el Item
            	String itemDesc = XmlUtils.getItemTelephonyDescription(campaign);
            	if (itemDesc == null) {
                	Logger.log(Logger.Debug, "Creando nuevo Item");
            		ItemTypeDeploy.AddItemType("E_N"+campaign);
            		XmlUtils.addItemRuleSpecTelephony(campaign, campaignName);
            	}
            	else {//Caso en el que el item ya existe, solo actualizo la descripcion si es necesario
            		if (!itemDesc.equals(campaignName)) {
                    	Logger.log(Logger.Debug, "Modificando Item Desc");
            			XmlUtils.modItemTelephonyDescription(campaign, campaignName);
            		}
            	}
            	PriceTierRange ptrPrice;
            	PriceTierRange ptrDur0 = new PriceTierRange("NO_MAX", "188", taxCode, 0.0, "MINUTES", 1.0, glid);
            	PriceTierRange ptrEvt0 = new PriceTierRange("1", "188", taxCode, 0.0, "NONE", 1.0, glid);
            	if (rateType.equals("DUR")) {
            		ptrPrice = new PriceTierRange("NO_MAX", "188", taxCode, price, "MINUTES", 1.0, glid);
            	}
            	else {
            		ptrPrice = new PriceTierRange("1", "188", taxCode, price, "NONE", 1.0, glid);
            	}
				List<PriceTierRange> lPrice = new ArrayList<PriceTierRange>();
				lPrice.add(ptrPrice);
				List<PriceTierRange> lDur0 = new ArrayList<PriceTierRange>();
				lDur0.add(ptrDur0);
				List<PriceTierRange> lEvt0 = new ArrayList<PriceTierRange>();
				lEvt0.add(ptrEvt0);
            	HashMap<String, List<PriceTierRange>> ptrHashDur = new HashMap<String, List<PriceTierRange>>();
            	HashMap<String, List<PriceTierRange>> ptrHashEvt = new HashMap<String, List<PriceTierRange>>();
				if (validFrom.compareTo(Parameters.START_DATE_FROM) > 0) {
					ptrHashDur.put(Parameters.START_DATE_FROM, lDur0);//Siempre el price tier range debe iniciar en esta fecha, se inicia con cargo 0
					ptrHashEvt.put(Parameters.START_DATE_FROM, lEvt0);
					if (rateType.equals("DUR")) {
						ptrHashDur.put(validFrom, lPrice);
					}
					else {
						ptrHashEvt.put(validFrom, lPrice);
					}
				}
				else {
					if (rateType.equals("DUR")) {
		            	ptrHashDur.put(validFrom, lPrice);
		            	ptrHashEvt.put(Parameters.START_DATE_FROM, lEvt0);//Siempre el price tier range debe iniciar en esta fecha
					}
					else {
		            	ptrHashDur.put(Parameters.START_DATE_FROM, lDur0);
		            	ptrHashEvt.put(validFrom, lPrice);
					}
				}
            	//Configurando Price Tier por duracion
            	if (rateType.equals("DUR")) {
            		if (XmlUtils.getTelephonyPriceTier(zoneDur) == null) {//Busco si es que ya existe el PriceTier
	            		PriceTier ptDur = new PriceTier(zoneDur, ptrHashDur, "DUR");
	            		PriceTier ptEvt = new PriceTier(zoneDur, ptrHashEvt, "EVT");
	        			XmlUtils.addTelephonyPriceTier(ptDur, ptEvt);
	        		}
	            	else {
	            		XmlUtils.addTelephonyPriceTierRange(zoneDur, validFrom, ptrPrice);
	            	}
            	}
            	//Configurando Price Tier por evento
            	if (rateType.equals("EVT")) {
	            	if (XmlUtils.getTelephonyPriceTier(zoneEvt) == null) {//Busco si es que ya existe el PriceTier
	            		PriceTier ptEvt = new PriceTier(zoneEvt, ptrHashEvt, "EVT");
	            		PriceTier ptDur = new PriceTier(zoneEvt, ptrHashDur, "DUR");
	        			XmlUtils.addTelephonyPriceTier(ptDur, ptEvt);
	            	}
	            	else {
	            		XmlUtils.addTelephonyPriceTierRange(zoneEvt, validFrom, ptrPrice);
	            	}
            	}
            	XmlUtils.updateHistoryXml("E_N"+campaign);
        	}
        	else if (evtType.equals("SMS")) {
        		String zoneMO = "E_S"+campaign;
        		String zoneMT = "E_S"+campaign+"MT";
            	if (XmlUtils.isZoneValidAtDate(zoneMO, validFrom) || XmlUtils.isZoneValidAtDate(zoneMT, validFrom) || 
            			XmlUtils.isZoneValidAtDate(zoneMO, validTo) || XmlUtils.isZoneValidAtDate(zoneMT, validTo)) {
            		dateNotValid();
            	}
            	Logger.log(Logger.Debug, "Agregando Zone Item");
            	XmlUtils.addZoneItem("TelcoGsmSms", zoneMO, validFrom, validTo, "00777" + Integer.toString(campaign.length()) + campaign, campaignName);
            	XmlUtils.addZoneItem("TelcoGsmSms", zoneMT, validFrom, validTo, "00888" + Integer.toString(campaign.length()) + campaign, campaignName);
            	//Busco si es que ya existe el Item
            	String itemDesc = XmlUtils.getItemSmsDescription(campaign);
            	if (itemDesc == null) {
                	Logger.log(Logger.Debug, "Creando nuevo Item");
            		ItemTypeDeploy.AddItemType("E_S"+campaign);
            		XmlUtils.addItemRuleSpecSms(campaign, campaignName);
            	}
            	else {//Caso en el que el item ya existe, solo actualizo la descripcion si es necesario
            		if (!itemDesc.equals(campaignName)) {
                    	Logger.log(Logger.Debug, "Modificando Item Desc");
            			XmlUtils.modItemSmsDescription(campaign, campaignName);
            		}
            	}
            	PriceTierRange ptrPrice = new PriceTierRange("NO_MAX", "188", taxCode, price, "NONE", 1.0, glid);
            	PriceTierRange ptr0 = new PriceTierRange("NO_MAX", "188", taxCode, 0.0, "NONE", 1.0, glid);
            	HashMap<String, List<PriceTierRange>> ptrHashPrice = new HashMap<String, List<PriceTierRange>>();
				List<PriceTierRange> lPrice = new ArrayList<PriceTierRange>();
				lPrice.add(ptrPrice);
            	HashMap<String, List<PriceTierRange>> ptrHash0 = new HashMap<String, List<PriceTierRange>>();
				List<PriceTierRange> l0 = new ArrayList<PriceTierRange>();
				l0.add(ptr0);
            	//Configurando Price Tier por duracion
            	if (XmlUtils.getSmsPriceTier(zoneMO) == null) {//Busco si es que ya existe el PriceTier
            		PriceTier ptMO, ptMT;
            		if (validFrom.compareTo(Parameters.START_DATE_FROM) > 0) {
                    	ptrHashPrice.put(Parameters.START_DATE_FROM, l0);
                    	ptrHash0.put(Parameters.START_DATE_FROM, l0);
            		}
                	ptrHashPrice.put(validFrom, lPrice);
                	ptrHash0.put(validFrom, l0);
            		if (rateType.equals("MO")) {
            			ptMO = new PriceTier(zoneMO, ptrHashPrice, "EVT");
            			ptMT = new PriceTier(zoneMT, ptrHash0, "EVT");
            		}
            		else {
            			ptMO = new PriceTier(zoneMO, ptrHash0, "EVT");
            			ptMT = new PriceTier(zoneMT, ptrHashPrice, "EVT");
            		}
        			XmlUtils.addSmsPriceTier("E_S"+campaign, ptMO);
        			XmlUtils.addSmsPriceTier("E_S"+campaign+"MT", ptMT);
        		}
            	else { 
                	ptrHashPrice.put(validFrom, lPrice);
                	ptrHash0.put(validFrom, l0);
            		if (rateType.equals("MO")) {
            			XmlUtils.addSmsPriceTierRange(zoneMO, validFrom, ptrPrice);
            			XmlUtils.addSmsPriceTierRange(zoneMT, validFrom, ptr0);
            		}
            		else {
            			XmlUtils.addSmsPriceTierRange(zoneMO, validFrom, ptr0);
            			XmlUtils.addSmsPriceTierRange(zoneMT, validFrom, ptrPrice);
            		}
            	}
            	XmlUtils.updateHistoryXml("E_S"+campaign);
            	XmlUtils.updateHistoryXml("E_S"+campaign+"MT");
            }
        	Utils.notifyNewCampaign(evtType, campaign, validFrom+" a "+validTo, Double.toString(price), glid, campaignName, (modality.equals(Modality.HYBRID) || modality.equals(Modality.PREPAID)));
            Logger.screen(Logger.Debug, "Nueva campa\u00F1a creada!");
        } catch (Exception e) {
        	e.printStackTrace();
            Logger.screen(Logger.Error, "Valor inv\u00E1lido en AddMark");
            System.exit(Parameters.ERR_INVALID_VALUE);
        }
    }
    
    private static void campaignTel(Modality modality, String rateType, String campaign, String campaignName,
			String realNumber, String validFrom, String validTo, String glid, Double price, String taxCode) throws Exception {
    	ServiceType serviceType = modality.TEL;
    	for(ResultName resultName : modality.getResultsNames(serviceType)) { 
    		String zoneName = resultName.getZoneName(campaign);
	    	if (XmlUtilsByModality.isZoneValidAtDate(modality, serviceType, zoneName, validFrom) || XmlUtilsByModality.isZoneValidAtDate(modality, serviceType, zoneName, validTo))
	    		dateNotValid();
    	}
    	if (XmlUtilsByModality.isZoneDestinValidAtDate(modality, serviceType, campaign, validFrom) || XmlUtilsByModality.isZoneDestinValidAtDate(modality, serviceType, campaign, validTo))
    		dateNotValidForRealNumber();
    	Logger.log(Logger.Debug, "Agregando Zone Item");
    	XmlUtilsByModality.addZoneItem(modality, serviceType, campaign, validFrom, validTo, serviceType.prefix + realNumber,  null);
    	List<PriceTierRange> listOfPriceTierRange = new ArrayList<PriceTierRange>();
    	if (rateType.equals("DUR")) {
	    	listOfPriceTierRange.add(new PriceTierRange("2", "188", taxCode, 0.0, "MINUTES", 1.0, glid));
	    	listOfPriceTierRange.add(new PriceTierRange("NO_MAX", "188", taxCode, Parameters.DEFAULT_PRICE_MINUTE, "MINUTES", 1.0, glid));
	    	listOfPriceTierRange.add(new PriceTierRange("NO_MAX", "188", taxCode, price, "MINUTES", 1.0, glid));
    	}else{
    		listOfPriceTierRange.add(new PriceTierRange("2", "188", taxCode, 0.0, "MINUTES", 1.0, glid));
	    	listOfPriceTierRange.add(new PriceTierRange("NO_MAX", "188", taxCode, Parameters.DEFAULT_PRICE_MINUTE, "MINUTES", 1.0, glid));
	    	listOfPriceTierRange.add(new PriceTierRange("NO_MAX", "188", taxCode, price, "MINUTES", 1.0, glid, false));
    	}
    	
    	HashMap<String, List<PriceTierRange>> mapPriceTierRange = new HashMap<String, List<PriceTierRange>>();
    	mapPriceTierRange.put(Parameters.START_DATE_FROM_PRE, listOfPriceTierRange);
    	mapPriceTierRange.put(validFrom, listOfPriceTierRange);
    	for(ResultName resultName : modality.getResultsNames(serviceType)) {
    		String zoneName = resultName.getZoneName(campaign);
			if (!XmlUtilsByModality.existsTelephonyPriceTier(modality, serviceType, zoneName)) {//Busco si es que ya existe
	    		XmlUtilsByModality.addPriceTier(modality, serviceType, new PriceTier(zoneName, mapPriceTierRange, rateType));
			}else {
	    		XmlUtilsByModality.addPriceTierRange(modality, serviceType, new PriceTier(zoneName, mapPriceTierRange, rateType));
	    	}
			XmlUtilsByModality.updateHistoryXml(modality, serviceType, resultName.getZoneName(campaign));
    	}

    }

	private static void campaignSms(Modality modality, String rateType, String campaign, String campaignName,
			String realNumber, String validFrom, String validTo, String glid, Double price, String taxCode) throws Exception {
		ServiceType serviceType = modality.SMS;
    	for(ResultName resultName : modality.getResultsNames(serviceType)) { 
    		if(resultName.group.equals(rateType)) {
	    		String zoneName = resultName.getZoneName(campaign);
		    	if (XmlUtilsByModality.isZoneValidAtDate(modality, serviceType, zoneName, validFrom) || XmlUtilsByModality.isZoneValidAtDate(modality, serviceType, zoneName, validTo))
		    		dateNotValid();
    		}
    	}
    	if (XmlUtilsByModality.isZoneDestinValidAtDate(modality, serviceType, campaign, validFrom) || XmlUtilsByModality.isZoneDestinValidAtDate(modality, serviceType, campaign, validTo))
    		dateNotValidForRealNumber();
    	Logger.log(Logger.Debug, "Agregando Zone Item");
    	XmlUtilsByModality.addZoneItem(modality, serviceType, campaign, validFrom, validTo, serviceType.prefix + realNumber, rateType);
    	List<PriceTierRange> listOfPriceTierRange = new ArrayList<PriceTierRange>();
    	if(rateType.equals("MT"))
    		listOfPriceTierRange.add(new PriceTierRange("NO_MAX", "188", taxCode, price, "NONE", 1.0, glid, true, "MT"));
    	else{
    		listOfPriceTierRange.add(new PriceTierRange("NO_MAX", "188", null, Parameters.DEFAULT_PRICE_SMS, "NONE", 1.0, glid, false, "MO"));
    		listOfPriceTierRange.add(new PriceTierRange("NO_MAX", "188", taxCode, price, "NONE", 1.0, glid, true, "MO"));
    	}
    	
    	HashMap<String, List<PriceTierRange>> mapPriceTierRange = new HashMap<String, List<PriceTierRange>>();
    	mapPriceTierRange.put(Parameters.START_DATE_FROM_PRE, listOfPriceTierRange);
    	mapPriceTierRange.put(validFrom, listOfPriceTierRange);
    	for(ResultName resultName : modality.getResultsNames(serviceType)) {
    		if(!resultName.group.equals(rateType))
    			continue;
			if (!XmlUtilsByModality.existsTelephonyPriceTier(modality, serviceType, resultName.getZoneName(campaign))) {//Busco si es que ya existe
	    		XmlUtilsByModality.addPriceTier(modality, serviceType, new PriceTier(resultName.getZoneName(campaign), mapPriceTierRange, rateType), resultName);
			}else {
	    		XmlUtilsByModality.addPriceTierRange(modality, serviceType, new PriceTier(resultName.getZoneName(campaign), mapPriceTierRange, rateType), resultName);
	    	}
			XmlUtilsByModality.updateHistoryXml(modality, serviceType, resultName.getZoneName(campaign));
    	}
    }
	        
    private static void dateNotValid() {
        Logger.screen(Logger.Error, "Existe una campa\u00F1a vigente con el mismo ID dentro del rango de fechas indicado!");
        Logger.screen(Logger.Error, "Saliendo.");
        System.exit(Parameters.ERR_INVALID_VALUE);
    }
    
	private static void dateNotValidForRealNumber() {
		Logger.screen(Logger.Error, "Existe una campa\u00F1a vigente con el mismo numero real dentro del rango de fechas indicado!");
		Logger.screen(Logger.Error, "Saliendo.");
		System.exit(Parameters.ERR_INVALID_VALUE);
	}
}
